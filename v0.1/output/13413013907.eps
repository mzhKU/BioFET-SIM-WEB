%!PS-Adobe-2.0 EPSF-2.0
%%Title: /var/www/propka/biofet-sim/v0.1/output/13413013907.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Tue Jul  3 09:43:10 2012
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -73 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Times-Roman) findfont 220 scalefont setfont
2.000 UL
LTb
1122 660 M
63 0 V
5641 0 R
-63 0 V
stroke
990 660 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 2.6)]
] -73.3 MRshow
2.000 UL
LTb
1122 1072 M
63 0 V
5641 0 R
-63 0 V
stroke
990 1072 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 2.8)]
] -73.3 MRshow
2.000 UL
LTb
1122 1483 M
63 0 V
5641 0 R
-63 0 V
stroke
990 1483 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 3)]
] -73.3 MRshow
2.000 UL
LTb
1122 1895 M
63 0 V
5641 0 R
-63 0 V
stroke
990 1895 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 3.2)]
] -73.3 MRshow
2.000 UL
LTb
1122 2306 M
63 0 V
5641 0 R
-63 0 V
stroke
990 2306 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 3.4)]
] -73.3 MRshow
2.000 UL
LTb
1122 2718 M
63 0 V
5641 0 R
-63 0 V
stroke
990 2718 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 3.6)]
] -73.3 MRshow
2.000 UL
LTb
1122 3130 M
63 0 V
5641 0 R
-63 0 V
stroke
990 3130 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 3.8)]
] -73.3 MRshow
2.000 UL
LTb
1122 3541 M
63 0 V
5641 0 R
-63 0 V
stroke
990 3541 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 4)]
] -73.3 MRshow
2.000 UL
LTb
1122 3953 M
63 0 V
5641 0 R
-63 0 V
stroke
990 3953 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 4.2)]
] -73.3 MRshow
2.000 UL
LTb
1122 4364 M
63 0 V
5641 0 R
-63 0 V
stroke
990 4364 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 4.4)]
] -73.3 MRshow
2.000 UL
LTb
1122 4776 M
63 0 V
5641 0 R
-63 0 V
stroke
990 4776 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 4.6)]
] -73.3 MRshow
2.000 UL
LTb
1122 660 M
0 63 V
0 4053 R
0 -63 V
stroke
1122 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 1.6)]
] -73.3 MCshow
2.000 UL
LTb
1835 660 M
0 63 V
0 4053 R
0 -63 V
stroke
1835 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 1.7)]
] -73.3 MCshow
2.000 UL
LTb
2548 660 M
0 63 V
0 4053 R
0 -63 V
stroke
2548 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 1.8)]
] -73.3 MCshow
2.000 UL
LTb
3261 660 M
0 63 V
0 4053 R
0 -63 V
stroke
3261 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 1.9)]
] -73.3 MCshow
2.000 UL
LTb
3974 660 M
0 63 V
0 4053 R
0 -63 V
stroke
3974 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 2)]
] -73.3 MCshow
2.000 UL
LTb
4687 660 M
0 63 V
0 4053 R
0 -63 V
stroke
4687 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 2.1)]
] -73.3 MCshow
2.000 UL
LTb
5400 660 M
0 63 V
0 4053 R
0 -63 V
stroke
5400 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 2.2)]
] -73.3 MCshow
2.000 UL
LTb
6113 660 M
0 63 V
0 4053 R
0 -63 V
stroke
6113 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 2.3)]
] -73.3 MCshow
2.000 UL
LTb
6826 660 M
0 63 V
0 4053 R
0 -63 V
stroke
6826 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 2.4)]
] -73.3 MCshow
2.000 UL
LTb
2.000 UL
LTb
1122 660 M
5704 0 V
0 4116 V
-5704 0 V
0 -4116 V
LTb
220 2718 M
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Symbol) 220.0 0.0 true true 0 (D)]
[(Times-Roman) 220.0 0.0 true true 0 (G/G)]
[(Times-Roman) 176.0 -66.0 true true 0 (0)]
] -51.3 MCshow
grestore
LTb
3974 110 M
[ [(Times-Roman) 220.0 0.0 true true 0 (Solvent Debye length )]
[(Symbol) 220.0 0.0 true true 0 (l)]
[(Times-Italic) 176.0 -66.0 true true 0 (D)]
[(Times-Roman) 220.0 0.0 true true 0 ( \(nm\))]
] -51.3 MCshow
1.000 UP
1.000 UP
6.000 UL
LT0
1122 986 CircleF
1179 1021 CircleF
1236 1057 CircleF
1293 1092 CircleF
1350 1127 CircleF
1407 1162 CircleF
1464 1197 CircleF
1521 1233 CircleF
1578 1268 CircleF
1635 1303 CircleF
1692 1338 CircleF
1749 1373 CircleF
1806 1409 CircleF
1864 1444 CircleF
1921 1479 CircleF
1978 1514 CircleF
2035 1549 CircleF
2092 1585 CircleF
2149 1620 CircleF
2206 1655 CircleF
2263 1690 CircleF
2320 1725 CircleF
2377 1760 CircleF
2434 1796 CircleF
2491 1831 CircleF
2548 1866 CircleF
2605 1901 CircleF
2662 1936 CircleF
2719 1971 CircleF
2776 2006 CircleF
2833 2041 CircleF
2890 2076 CircleF
2947 2111 CircleF
3004 2147 CircleF
3061 2182 CircleF
3118 2217 CircleF
3175 2252 CircleF
3232 2287 CircleF
3290 2322 CircleF
3347 2357 CircleF
3404 2392 CircleF
3461 2427 CircleF
3518 2462 CircleF
3575 2496 CircleF
3632 2531 CircleF
3689 2566 CircleF
3746 2601 CircleF
3803 2636 CircleF
3860 2671 CircleF
3917 2706 CircleF
3974 2741 CircleF
4031 2776 CircleF
4088 2810 CircleF
4145 2845 CircleF
4202 2880 CircleF
4259 2915 CircleF
4316 2950 CircleF
4373 2984 CircleF
4430 3019 CircleF
4487 3054 CircleF
4544 3089 CircleF
4601 3123 CircleF
4658 3158 CircleF
4716 3193 CircleF
4773 3227 CircleF
4830 3262 CircleF
4887 3297 CircleF
4944 3331 CircleF
5001 3366 CircleF
5058 3400 CircleF
5115 3435 CircleF
5172 3469 CircleF
5229 3504 CircleF
5286 3538 CircleF
5343 3573 CircleF
5400 3607 CircleF
5457 3642 CircleF
5514 3676 CircleF
5571 3711 CircleF
5628 3745 CircleF
5685 3780 CircleF
5742 3814 CircleF
5799 3848 CircleF
5856 3883 CircleF
5913 3917 CircleF
5970 3951 CircleF
6027 3986 CircleF
6084 4020 CircleF
6142 4054 CircleF
6199 4088 CircleF
6256 4123 CircleF
6313 4157 CircleF
6370 4191 CircleF
6427 4225 CircleF
6484 4259 CircleF
6541 4293 CircleF
6598 4327 CircleF
6655 4362 CircleF
6712 4396 CircleF
6769 4430 CircleF
6826 4464 CircleF
2.000 UL
LTb
1122 660 M
5704 0 V
0 4116 V
-5704 0 V
0 -4116 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Times-Italic Symbol Times-Roman
