# ************************************************************************
# CLASS: SimMulti
# - Represents the simulation of the multiple charge model.
# ........................................................................
#class SimMulti:
#    """
#    FIX:
#    - Append float instead of string to 'rho'.
#    - Refactor 'res_ids' and 'coords'.
#    """ 
#    # ********************************************************************
#    # Initializing simulation.
#    def __init__(self, target, av_RQ, pqr, param):
#        #def __init__(self, target, av_RQ, pqr):
#        """It appears, Jmol transfers data with unusual line delimiters,
#        therefore the special split arguments.
#        """
#        # Reoriented charge distribution coming from Jmol.
#        self.target    = target 
#        self.av_RQ     = av_RQ.split('\n')
#        self.param     = param
#        self.pqr       = pqr.split('\n')
#        self.rho       = []
#        self.rho_pqr   = ''
#
#    def set_rho(self):
#        """Combining the Jmol adjusted geometry with the charge
#        from the PROPKA match.
#        For historic reasons, the BFS compute unit requires the
#        'm' property (number of charges in biomolecule).
#        """
#        # Convenience abbreviations.
#        av_RQ = self.av_RQ 
#        pqr   = self.pqr
#        rho = self.rho
#        cnt = 0
#        # Prepare data for BFS calculation (in list format).
#        for av_rq_i in av_RQ:
#            # Avoiding empty lines.
#            if len(av_rq_i) != 0:
#                # Avoiding 'MODEL'/'ENDMDL' in the Jmol out stream.
#                if av_rq_i.split()[0] == 'ATOM': 
#                    r_i = av_rq_i[32:54] + pqr[cnt][54:61]
#                    rho.append(r_i.split())
#                    cnt += 1
#        self.m = len(rho)
#    # ....................................................................
# ------------------------------------------------------------------------ 
